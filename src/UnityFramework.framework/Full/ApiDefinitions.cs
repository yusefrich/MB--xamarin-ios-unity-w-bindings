using System;
using CoreAnimation;
using Foundation;
using ObjCRuntime;
using UIKit;
using UnityFramework;

// @protocol LifeCycleListener <NSObject>
/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
[BaseType (typeof(NSObject))]
interface LifeCycleListener
{
	// @optional -(void)didFinishLaunching:(NSNotification *)notification;
	[Export ("didFinishLaunching:")]
	void DidFinishLaunching (NSNotification notification);

	// @optional -(void)didBecomeActive:(NSNotification *)notification;
	[Export ("didBecomeActive:")]
	void DidBecomeActive (NSNotification notification);

	// @optional -(void)willResignActive:(NSNotification *)notification;
	[Export ("willResignActive:")]
	void WillResignActive (NSNotification notification);

	// @optional -(void)didEnterBackground:(NSNotification *)notification;
	[Export ("didEnterBackground:")]
	void DidEnterBackground (NSNotification notification);

	// @optional -(void)willEnterForeground:(NSNotification *)notification;
	[Export ("willEnterForeground:")]
	void WillEnterForeground (NSNotification notification);

	// @optional -(void)willTerminate:(NSNotification *)notification;
	[Export ("willTerminate:")]
	void WillTerminate (NSNotification notification);

	// @optional -(void)unityDidUnload:(NSNotification *)notification;
	[Export ("unityDidUnload:")]
	void UnityDidUnload (NSNotification notification);

	// @optional -(void)unityDidQuit:(NSNotification *)notification;
	[Export ("unityDidQuit:")]
	void UnityDidQuit (NSNotification notification);
}

[Static]
[Verify (ConstantsInterfaceAssociation)]
partial interface Constants
{
	// extern NSString *const kUnityDidUnload __attribute__((visibility("default")));
	[Field ("kUnityDidUnload", "__Internal")]
	NSString kUnityDidUnload { get; }

	// extern NSString *const kUnityDidQuit __attribute__((visibility("default")));
	[Field ("kUnityDidQuit", "__Internal")]
	NSString kUnityDidQuit { get; }
}

// @protocol RenderPluginDelegate <LifeCycleListener, NSObject>
[Protocol, Model (AutoGeneratedName = true)]
[BaseType (typeof(NSObject))]
interface RenderPluginDelegate : ILifeCycleListener
{
	// @required -(void)mainDisplayInited:(struct UnityDisplaySurfaceBase *)surface;
	[Abstract]
	[Export ("mainDisplayInited:")]
	unsafe void MainDisplayInited (UnityDisplaySurfaceBase* surface);

	// @optional -(void)onBeforeMainDisplaySurfaceRecreate:(struct RenderingSurfaceParams *)params;
	[Export ("onBeforeMainDisplaySurfaceRecreate:")]
	unsafe void OnBeforeMainDisplaySurfaceRecreate (RenderingSurfaceParams* @params);

	// @optional -(void)onAfterMainDisplaySurfaceRecreate;
	[Export ("onAfterMainDisplaySurfaceRecreate")]
	void OnAfterMainDisplaySurfaceRecreate ();

	// @optional -(void)onFrameResolved;
	[Export ("onFrameResolved")]
	void OnFrameResolved ();
}

// @interface RenderPluginDelegate : NSObject <RenderPluginDelegate>
[BaseType (typeof(NSObject))]
interface RenderPluginDelegate : IRenderPluginDelegate
{
	// -(void)mainDisplayInited:(struct UnityDisplaySurfaceBase *)surface;
	[Export ("mainDisplayInited:")]
	unsafe void MainDisplayInited (UnityDisplaySurfaceBase* surface);
}

// @interface RenderPluginArrayDelegate : RenderPluginDelegate
[BaseType (typeof(RenderPluginDelegate))]
interface RenderPluginArrayDelegate
{
	// @property (retain, nonatomic) NSArray * delegateArray;
	[Export ("delegateArray", ArgumentSemantic.Retain)]
	[Verify (StronglyTypedNSArray)]
	NSObject[] DelegateArray { get; set; }

	// -(void)mainDisplayInited:(struct UnityDisplaySurfaceBase *)surface;
	[Export ("mainDisplayInited:")]
	unsafe void MainDisplayInited (UnityDisplaySurfaceBase* surface);

	// -(void)onBeforeMainDisplaySurfaceRecreate:(struct RenderingSurfaceParams *)params;
	[Export ("onBeforeMainDisplaySurfaceRecreate:")]
	unsafe void OnBeforeMainDisplaySurfaceRecreate (RenderingSurfaceParams* @params);

	// -(void)onAfterMainDisplaySurfaceRecreate;
	[Export ("onAfterMainDisplaySurfaceRecreate")]
	void OnAfterMainDisplaySurfaceRecreate ();

	// -(void)onFrameResolved;
	[Export ("onFrameResolved")]
	void OnFrameResolved ();

	// -(void)didBecomeActive:(NSNotification *)notification;
	[Export ("didBecomeActive:")]
	void DidBecomeActive (NSNotification notification);

	// -(void)willResignActive:(NSNotification *)notification;
	[Export ("willResignActive:")]
	void WillResignActive (NSNotification notification);

	// -(void)didEnterBackground:(NSNotification *)notification;
	[Export ("didEnterBackground:")]
	void DidEnterBackground (NSNotification notification);

	// -(void)willEnterForeground:(NSNotification *)notification;
	[Export ("willEnterForeground:")]
	void WillEnterForeground (NSNotification notification);

	// -(void)willTerminate:(NSNotification *)notification;
	[Export ("willTerminate:")]
	void WillTerminate (NSNotification notification);
}

// @interface UnityAppController : NSObject <UIApplicationDelegate>
[BaseType (typeof(NSObject))]
interface UnityAppController : IUIApplicationDelegate
{
	// -(void)shouldAttachRenderDelegate;
	[Export ("shouldAttachRenderDelegate")]
	void ShouldAttachRenderDelegate ();

	// -(void)preStartUnity;
	[Export ("preStartUnity")]
	void PreStartUnity ();

	// -(void)startUnity:(UIApplication *)application;
	[Export ("startUnity:")]
	void StartUnity (UIApplication application);

	// @property (retain, nonatomic) UIWindow * window;
	[Export ("window", ArgumentSemantic.Retain)]
	UIWindow Window { get; set; }

	// @property (readonly, copy, nonatomic) UnityView * unityView;
	[Export ("unityView", ArgumentSemantic.Copy)]
	UnityView UnityView { get; }

	// @property (readonly, copy, nonatomic) CADisplayLink * unityDisplayLink;
	[Export ("unityDisplayLink", ArgumentSemantic.Copy)]
	CADisplayLink UnityDisplayLink { get; }

	// @property (readonly, copy, nonatomic) UIView * rootView;
	[Export ("rootView", ArgumentSemantic.Copy)]
	UIView RootView { get; }

	// @property (readonly, copy, nonatomic) UIViewController * rootViewController;
	[Export ("rootViewController", ArgumentSemantic.Copy)]
	UIViewController RootViewController { get; }

	// @property (readonly, copy, nonatomic) DisplayConnection * mainDisplay;
	[Export ("mainDisplay", ArgumentSemantic.Copy)]
	DisplayConnection MainDisplay { get; }

	[Wrap ("WeakRenderDelegate")]
	NSObject RenderDelegate { get; set; }

	// @property (retain, nonatomic) id renderDelegate;
	[NullAllowed, Export ("renderDelegate", ArgumentSemantic.Retain)]
	NSObject WeakRenderDelegate { get; set; }

	// @property (copy, nonatomic) void (^quitHandler)();
	[Export ("quitHandler", ArgumentSemantic.Copy)]
	Action QuitHandler { get; set; }
}

[Static]
[Verify (ConstantsInterfaceAssociation)]
partial interface Constants
{
	// extern UnityAppController * _UnityAppController;
	[Field ("_UnityAppController", "__Internal")]
	UnityAppController _UnityAppController { get; }

	// extern double UnityFrameworkVersionNumber;
	[Field ("UnityFrameworkVersionNumber", "__Internal")]
	double UnityFrameworkVersionNumber { get; }

	// extern const unsigned char [] UnityFrameworkVersionString;
	[Field ("UnityFrameworkVersionString", "__Internal")]
	byte[] UnityFrameworkVersionString { get; }
}

// @protocol UnityFrameworkListener <NSObject>
/*
  Check whether adding [Model] to this declaration is appropriate.
  [Model] is used to generate a C# class that implements this protocol,
  and might be useful for protocols that consumers are supposed to implement,
  since consumers can subclass the generated class instead of implementing
  the generated interface. If consumers are not supposed to implement this
  protocol, then [Model] is redundant and will generate code that will never
  be used.
*/[Protocol]
[BaseType (typeof(NSObject))]
interface UnityFrameworkListener
{
	// @optional -(void)unityDidUnload:(NSNotification *)notification;
	[Export ("unityDidUnload:")]
	void UnityDidUnload (NSNotification notification);

	// @optional -(void)unityDidQuit:(NSNotification *)notification;
	[Export ("unityDidQuit:")]
	void UnityDidQuit (NSNotification notification);
}

// @interface UnityFramework : NSObject
[BaseType (typeof(NSObject))]
interface UnityFramework
{
	// -(UnityAppController *)appController;
	[Export ("appController")]
	[Verify (MethodToProperty)]
	UnityAppController AppController { get; }

	// +(UnityFramework *)getInstance;
	[Static]
	[Export ("getInstance")]
	[Verify (MethodToProperty)]
	UnityFramework Instance { get; }

	// -(void)setDataBundleId:(const char *)bundleId;
	[Export ("setDataBundleId:")]
	unsafe void SetDataBundleId (sbyte* bundleId);

	// -(void)runUIApplicationMainWithArgc:(int)argc argv:(char **)argv;
	[Export ("runUIApplicationMainWithArgc:argv:")]
	unsafe void RunUIApplicationMainWithArgc (int argc, sbyte*[] argv);

	// -(void)runEmbeddedWithArgc:(int)argc argv:(char **)argv appLaunchOpts:(NSDictionary *)appLaunchOpts;
	[Export ("runEmbeddedWithArgc:argv:appLaunchOpts:")]
	unsafe void RunEmbeddedWithArgc (int argc, sbyte*[] argv, NSDictionary appLaunchOpts);

	// -(void)runEmbedded;
	[Export ("runEmbedded")]
	void RunEmbedded ();

	// +(UnityFramework *)loadUnity;
	[Static]
	[Export ("loadUnity")]
	[Verify (MethodToProperty)]
	UnityFramework LoadUnity { get; }

	// -(void)unloadApplication;
	[Export ("unloadApplication")]
	void UnloadApplication ();

	// -(void)quitApplication:(int)exitCode;
	[Export ("quitApplication:")]
	void QuitApplication (int exitCode);

	// -(void)registerFrameworkListener:(id<UnityFrameworkListener>)obj;
	[Export ("registerFrameworkListener:")]
	void RegisterFrameworkListener (UnityFrameworkListener obj);

	// -(void)unregisterFrameworkListener:(id<UnityFrameworkListener>)obj;
	[Export ("unregisterFrameworkListener:")]
	void UnregisterFrameworkListener (UnityFrameworkListener obj);

	// -(void)showUnityWindow;
	[Export ("showUnityWindow")]
	void ShowUnityWindow ();

	// -(void)pause:(_Bool)pause;
	[Export ("pause:")]
	void Pause (bool pause);

	// -(void)setExecuteHeader:(const MachHeader *)header;
	[Export ("setExecuteHeader:")]
	unsafe void SetExecuteHeader (MachHeader* header);

	// -(void)sendMessageToGOWithName:(const char *)goName functionName:(const char *)name message:(const char *)msg;
	[Export ("sendMessageToGOWithName:functionName:message:")]
	unsafe void SendMessageToGOWithName (sbyte* goName, sbyte* name, sbyte* msg);
}
